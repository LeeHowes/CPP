<pre class='metadata'>
Title: System execution context
Shortname: P2079
Level: 4
Status: P
Group: wg21
Date: 2024-05-01
Editor: Lee Howes, lwh@fb.com
        Ruslan Arutyunyan, Intel, ruslan.arutyunyan@intel.com
        Michael Voss, Intel, michaelj.voss@intel.com
        Lucian Radu Teodorescu, lucteo@lucteo.ro
Audience: SG1, LEWG
URL: http://wg21.link/P2079R4
Abstract: A standard execution context based on the facilities in [[P2300R9]] that implements parallel-forward-progress to
          maximise portability. A set of <code>system_context</code>`s share an underlying shared thread pool implementation, and may
          provide an interface to an OS-provided system thread pool.
Markup Shorthands: markdown yes
</pre>


# Changes # {#changes}

## R5 ## {#r5}
- streamline the paper
- replaceability is implementation-defined
- replace the use of `system_context` class with direct calls to `get_system_scheduler()`
- update user-facing API
- define API for implementing custom system contexts
- relax again the lifetime guarantees, to allow using system scheduler outside of `main()`

## R4 ## {#r4}
- Add more design considerations & goals.
- Add comparison of different replaceability options
- Add motivation for replaceabiilty ABI standardization
- Add the example of the ABI for replacement
- Strengthen the lifetime guarantees.

## R3 ## {#r3}
- Remove `execute_all` and `execute_chunk`. Replace with compile-time customization and a design discussion.
- Add design discussion about the approach we should take for customization and the extent to which the context should be implementation-defined.
- Add design discussion for an explicit `system_context` class.
- Add design discussion about priorities.

## R2 ## {#r2}
- Significant redesign to fit in [[P2300R9]] model.
- Strictly limit to parallel progress without control over the level of parallelism.
- Remove direct support for task groups, delegating that to `async_scope`.

## R1 ## {#r1}
- Minor modifications

## R0 ## {#r0}
- First revision

# Introduction # {#introduction}
[[P2300R9]] describes a rounded set of primitives for asynchronous and parallel execution that give a firm grounding for the future.
However, the paper lacks a standard execution context and scheduler.
It has been broadly accepted that we need some sort of standard scheduler.

As part of [[P3109R0]], `system_context` was voted as a must-have for the initial release of senders/receivers.
It provides a convenient and scalable way of spawning concurrent work for the users of senders/receivers.

As noted in [[P2079R1]], an earlier revision of this paper, the `static_thread_pool` included in later revisions of [[P0443R14]] had many shortcomings.
This was removed from [[P2300R9]] based on that and other input.

One of the biggest problems with local thread pools is that they lead to CPU oversubscription.
This introduces a performance problem for complex systems that are composed from many independent parts.

Another problem that system context is aiming to solve is the composability of components that may rely on different parallel engines.
An application might have multiple parts, possibly in different binaries; different parts of the application may not know of each other.
Thus, different parts of the application might use different parallel engines.
This can create several problems:
* oversubscription because of different thread pools
* problems with nested parallel loops (one parallel loop is called from the other)
* problems related to interaction between different parallel engines
* other performance problems
* etc.

To solve these problems we propose a shared parallel execution context that:
* can be shared between multiple parts of the application
* does not suffer from oversubscription
* can integrate with the OS scheduler
* can be replaced by the user to compose well with other parallel runtimes

## Design overview ## {#design_overview}

The system context is a parallel execution context of undefined size, supporting explicitly *parallel forward progress*.
By requiring only parallel forward progress, any created parallel context is able to be a view onto the underlying shared global context. (TODO: this phrase is not quite clear; we should probably remove)

The execution resources of the system context are envisioned to be shared across all binaries in the same process.
System scheduler works best with CPU-intensive workloads, and thus, limiting oversubscription is a key goal.

By default, the system context should be able to use the OS scheduler, if the OS has one.
On systems where the OS scheduler is not available, the system context will have a generic implementation that acts like a thread pool.

For enabling the users to hand-tune the performance of their applications, and for fulfulling the composability requirements, the system context should be replaceable.
The user should be able to replace the default implementation of the system context with a custom one that fits their needs.
We define a *replaceability API* that defines how the system context can be replaced; we, however leave some of the replaceability mechanisms to be implementation-defined.

Other key concerns of this design are:
* Extensibility: being able to extend the design to work with new additions to the senders/receivers framework.
* Lifetime: as `system_context` is a global resource, we need to pay attention to the lifetime of this resource.
* Performance: as we envision this to be used in many cases to spawn concurrent work, performance considerations are important.

# Examples # {#examples}
As a simple parallel scheduler we can use it locally, and `sync_wait` on the work to make sure that it is complete.
With forward progress delegation this would also allow the scheduler to delegate work to the blocked thread.
This example is derived from the Hello World example in [[P2300R9]]. Note that it only adds a well-defined context
object, and queries that for the scheduler.
Everything else is unchanged about the example.

```cpp
using namespace std::execution;

system_context ctx;
scheduler auto sch = ctx.scheduler();

sender auto begin = schedule(sch);
sender auto hi = then(begin, []{
    std::cout << "Hello world! Have an int.";
    return 13;
});
sender auto add_42 = then(hi, [](int arg) { return arg + 42; });

auto [i] = this_thread::sync_wait(add_42).value();
```

We can structure the same thing using `execution::on`, which better matches structured concurrency:
```cpp
using namespace std::execution;

system_context ctx;
scheduler auto sch = ctx.scheduler();

sender auto hi = then(just(), []{
    std::cout << "Hello world! Have an int.";
    return 13;
});
sender auto add_42 = then(hi, [](int arg) { return arg + 42; });

auto [i] = this_thread::sync_wait(on(sch, add_42)).value();
```

The `system_scheduler` customises `bulk`, so we can use `bulk` dependent on the scheduler.
Here we use it in structured form using the parameterless `get_scheduler` that retrieves the scheduler from the receiver, combined with `on`:
```cpp
auto bar() {
  return
    ex::let_value(
      ex::get_scheduler(),          // Fetch scheduler from receiver.
      [](auto current_sched) {
        return bulk(
          current_sched.schedule(),
          1,                        // Only 1 bulk task as a lazy way of making cout safe
          [](auto idx){
            std::cout << "Index: " << idx << "\n";
          })
      });
}

void foo()
{
  using namespace std::execution;

  system_context ctx;

  auto [i] = this_thread::sync_wait(
    on(
      ctx.scheduler(),                // Start bar on the system_scheduler
      bar()))                         // and propagate it through the receivers
    .value();
}
```

Use `async_scope` and a custom system context implementation linked in to the process (through a mechanism undefined in the example).
This might be how a given platform exposes a custom context.
In this case we assume it has no threads of its own and has to take over the main thread through an custom `drive()` operation that can be looped until a callback requests `exit` on the context.

```cpp
using namespace std::execution;

system_context ctx;

int result = 0;

{
  async_scope scope;
  scheduler auto sch = ctx.scheduler();

  sender auto work =
    then(just(), [&](auto sched) {

      int val = 13;

      auto print_sender = then(just(), [val]{
        std::cout << "Hello world! Have an int with value: " << val << "\n";
      });

      // spawn the print sender on sched to make sure it
      // completes before shutdown
      scope.spawn(on(sch, std::move(print_sender)));

      return val;
    });

  scope.spawn(on(sch, std::move(work)));

  // This is custom code for a single-threaded context that we have replaced
  // We need to drive it in main.
  // It is not directly sender-aware, like any pre-existing work loop, but
  // does provide an exit operation. We may call this from a callback chained
  // after the scope becomes empty.
  // We use a temporary terminal_scope here to separate the shut down
  // operation and block for it at the end of main, knowing it will complete.
  async_scope terminal_scope;
  terminal_scope.spawn(
    scope.on_empty() | then([](my_os::exit(ctx))));
  my_os::drive(ctx);
  this_thread::sync_wait(terminal_scope);
};

// The scope ensured that all work is safely joined, so result contains 13
std::cout << "Result: " << result << "\n";

// and destruction of the context is now safe
```

# Design # {#design}

## User-facing API ## {#user_facing_api}

<pre highlight="c++">
system_scheduler get_system_scheduler();

class system_scheduler { // exposition only
public:
  system_scheduler() = delete;
  ~system_scheduler();

  system_scheduler(const system_scheduler&);
  system_scheduler(system_scheduler&&);
  system_scheduler& operator=(const system_scheduler&);
  system_scheduler& operator=(system_scheduler&&);

  bool operator==(const system_scheduler&) const noexcept;

  forward_progress_guarantee query(get_forward_progress_guarantee_t) const noexcept;
  
  <i>impl-defined-system_sender</i> schedule() const noexcept;
  // customization for bulk
};

class <i>impl-defined-system_sender</i> { // exposition only
public:
  friend pair&lt;std::execution::system_scheduler, delegatee_scheduler> tag_invoke(
    std::execution::get_completion_scheduler_t&lt;set_value_t>,
    const system_scheduler&) noexcept;
  friend pair&lt;std::execution::system_scheduler, delegatee_scheduler> tag_invoke(
    std::execution::get_completion_scheduler_t&lt;set_stopped_t>,
    const system_scheduler&) noexcept;

  template&lt;receiver R>
  requires receiver_of<R>
  <i>impl-defined-operation_state</i> connect(R&&) && noexcept(std::is_nothrow_constructible_v&lt;std::remove_cvref_t&lt;R>, R>);
};
</pre>

 - `get_system_scheduler()` returns a scheduler that provides a view on some underlying execution context supporting *parallel forward progress*, with at least one thread of execution (which may be the main thread).
 - two objects returned by `get_system_scheduler()` may share the same execution context.
    If work submitted by one can consume the underlying thread pool, that can block progress of another.
 - if `Sch` is the type of objects returned by `get_system_scheduler()`, then:
    - `Sch` is implementation-defined, but must be nameable.
    - `Sch` models the `scheduler` concept.
    - `Sch` implements the `get_forward_progress_guarantee` query to return `parallel`.
    - `Sch` implements `schedule` customisation point to return an implementation-defined `sender` type.
    - `schedule` calls on `Sch` are non-blocking operations.
    - `Sch` implements the `bulk` CPO to customise the `bulk` sender adapter such that:
        - when `execution::set_value(r, args...)` is called on the created `receiver`, an agent is created with parallel forward progress on the
            underlying system context for each `i` of type `Shape` from `0` to `sh`, where `sh` is the shape parameter to the bulk call, that calls `f(i, args...)`.
 - if `sch` is an object returned by `get_system_scheduler()`, then:
    - the lifetime of `sch` does not have to outlive work submitted to it.
    - `sch` is both move and copy constructible and assignable.
    - if `sch2` is another object returned by `get_system_scheduler()`, then `sch == sch2` is defined and always evaluates to `true`.
    - if the underlying system context is unable to make progress on work created through `sch`, and the sender retrieved
        from `sch` is connected to a `receiver` that supports the `get_delegatee_scheduler` query, work may scheduled on the `scheduler`
        returned by `get_delegatee_scheduler` at the time of the call to `start`, or at any later point before the work completes.
  - if `snd` is a sender obtaining from the `scheduler` returned by `get_system_scheduler()`, and `Snd` its type, then:
    - `Snd` is implementation-defined, but must be nameable.
    - `Snd` models the `sender` concept.
    - `Snd` implements the `get_completion_scheduler` query for the value and done channel where it returns a type that is logically
        a pair of an object that compares equal to itself, and a representation of delegatee scheduler that may be obtained from
        receivers connected with the sender.
    - `connect`ing `snd` to a `receiver` object and calling `start()` on the resulting operation state are non-blocking operations.
    - if `snd` is connected with a `receiver` that supports the `get_stop_token` query and if that `stop_token` is stopped, operations
        on which `start` has been called, but are not yet running (and are hence not yet guaranteed to make progress) **must**
        complete with `set_stopped` as soon as is practical.

## API for implementing custom system contexts ## {#api_custom_system_contexts}

Implementations may support replaceability of system scheduler; it's implementation-defined whether the system scheduler is replaceable or not.
If an implementation supports replaceability, the following API should be used.
The way that the following interfaces are used to replace the system scheduler is implementation-defined.
If the implementation of the system context does not support replaceability, the following API is not needed.


<pre highlight="c++">
namespace std::system_context_replaceability {
  template &lt;typename Interface>
  Interface* query_system_context();

  struct receiver {
    virtual ~receiver() = default;

    receiver(const receiver&) = delete;
    receiver(receiver&&) = delete;
    receiver& operator=(const receiver&) = delete;
    receiver& operator=(receiver&&) = delete;

    virtual void set_value() noexcept = 0;
    virtual void set_error(std::exception_ptr) noexcept = 0;
    virtual void set_stopped() noexcept = 0;
  };

  struct bulk_item_receiver : receiver {
    virtual void start(uint32_t) noexcept = 0;
  };

  struct storage {
    void* data;
    uint32_t size;
  };

  struct system_scheduler {
    virtual ~system_scheduler() = default;

    virtual void schedule(receiver*, storage, inplace_stop_token) noexcept = 0;
    virtual void bulk_schedule(uint32_t, bulk_item_receiver*, storage, inplace_stop_token) noexcept = 0;
  };
}

</pre>

 - Note: for the current exposition we call *backend* the part of the application that implements a custom system context, and *host* the part of the application that uses the custom system context. The *host* part consists of library code that implements the user-facing API to call the interfaces implemented by the backend.
 - `query_system_context` is a function that returns a pointer to an object that implements the `Interface` concept.
    - `query_system_context` must have a valid instantiation for the `system_scheduler` interface; it returns the underlying system scheduler implementation that is shared by all user-facing `system_context` objects.
    - is not required for `query_system_context` to be instantiable for interfaces like `receiver`, `bulk_item_receiver`, or `storage`.
    - Note: in the future, this mechanism may be used to query different types of system context objects, like I/O schedulers, priority schedulers, time schedulers, main scheduler, etc. It can also be used to query implementation-specific interfaces.
 - Note: `receiver`, `bulk_item_receiver`, and `storage` are interfaces that are implemented by the host side; only `system_scheduler` is expected to be implemented by a system context implementation.
 - the names of the fields of `storage` class are implementation-defined.
 - if `sch` is an object that implements `system_scheduler` interface (and can be returned by `query_system_context`), then the following must be true:
    - the users of `sch` must not destroy the object.
    - if `sch.schedule()` is called passing `r` of type `receiver*`, `st` of type `storage` `t` pf type `inplace_stop_token`, then:
      - at least one of `set_value`, `set_error`, or `set_stopped` must be eventually called on `r`;
        - `set_value` is called to signal a successful scheduling of the work; it must be called on a thread belonging to system execution context;
        - if `set_value` cannot be called, then `set_error` must be called to signal the scheduling error;
        - `set_stopped` may be called on `r` to signal that the execution of work is no longer needed;
      - the `storage` object `st` represents a memory region that starts at `st.data` and has `st.size` bytes.
        - the storage represented by `st` must be valid until the `receiver` object `r` is signaled.
        - the implementation may use the storage represented by `st` to store data needed for the scheduling operation.
      - Note: if `s.stop_requested()` returns `true`, `set_stopped` may be called; but this is not guaranteed.
    - if `sch.bulk_schedule()` is called passing `n` of type `uint32_t`, `r` of type  `bulk_item_receiver*`, `st` of type `storage` and `t` of type `inplace_stop_token`, then:
      - at least one of `set_value`, `set_error`, or `set_stopped` must be eventually called on `r`;
        - `set_value` is called to signal a successful scheduling of the work; it must be called on a thread belonging to system execution context;
        - if `set_value` cannot be called, then `set_error` must be called to signal the scheduling error;
        - `set_stopped` may be called on `r` to signal that the execution of work is no longer needed;
      - the `storage` object `st` represents a memory region that starts at `st.data` and has `st.size` bytes.
        - the storage represented by `st` must be valid until the `receiver` object `r` is signaled.
        - the implementation may use the storage represented by `st` to store data needed for the scheduling operation.
      - Note: if `s.stop_requested()` returns `true`, `set_stopped` may be called; but this is not guaranteed.
      - if `set_value` is called on `r`, then `start` must be called on `r` `n` times, where `n` is the value passed to `bulk_schedule`.
        - the `start` method is called on `r` to signal the start of the work for the `i`-th item in the bulk operation, where `i` is in the range `[0, n)`.
        - the `start` method must be called on a thread belonging to the system execution context.
        - the `start` method must be called before any methods on `r` is called.
      - if in the process of calling `start` on `r`, the implementation detects that the work cannot be started, then `set_error` must be called on `r` to signal the error; in this case `r` may not get all the expected `n` calls to `start`.
      - if in the process of calling `start` on `r`, the scheduling process is cancelled, then `set_stopped` must be called on `r` to signal the cancellation; in this case `r` may not get all the expected `n` calls to `start`.



# Design discussion and decisions # {#design_considerations}

## To drive or not to drive ## {#drive_not_drive}
On single-threaded systems (e.g., freestanding implementations) or on systems in which the main thread has special significance (e.g., to run the Qt main loop), it's important to allow scheduling work on the main thread.
For this, we need the main thread to *drive* work execution.

The earlier version of this paper, [[P2079R2]], included `execute_all` and `execute_chunk` operations to integrate with senders.
In this version we have removed them because they imply certain requirements of forward progress delegation on the system context and it is not clear whether or not they should be called.
We envision a separate paper that adds the support for drive-ability, which is decoupled by this paper.

We can simplify this discussion to a single function:
```
  void drive(system_context& ctx, sender auto snd);
```

Let's assume we have a single-threaded environment, and a means of customising the `system_context` for this environment.
We know we need a way to donate `main`'s thread to this context, it is the only thread we have available.
Assuming that we want a `drive` operation in some form, our choices are to:

 - define our `drive` operation, so that it is standard, and we use it on this system.
 - or allow the customisation to define a custom `drive` operation related to the specific single-threaded environment.

With a standard `drive` of this sort (or of the more complex design in [[P2079R2]]) we might write an example to use it directly:
```cpp
system_context ctx;
auto snd = on(ctx, doWork());
drive(ctx, std::move(snd));
```

Without drive, we rely on an `async_scope` to spawn the work and some system-specific drive operation:
```cpp
system_context ctx;
async_scope scope;
auto snd = on(ctx, doWork());
scope.spawn(std::move(snd));
custom_drive_operation(ctx);
```

Neither of the two variants is very portable.
The first variant requires applications that don't care about drive-ability to call `drive`, while the second variant requires custom pluming to tie the main thread with the system scheduler.

We envision a new paper that adds support for a *main scheduler* similar to the *system scheduler*.
The main scheduler, for hosted implementations would be typically different than the system scheduler.
On the other hand, on freestanding implementations, the main scheduler and system scheduler can share the same underlying implementation, and both of them can execute work on the main thread; in this mode, the main scheduler is required to be driven, so that system scheduler can execute work.

Keeping those two topic as separate papers allows to make progress independently.

## Freestanding implementations ## {#freestanding_implementations}

This paper payed attention to freestanding implementations, but doesn't make any wording proposals for them.
We express a strong desire for the system scheduler to work on freestanding implementations, but leave the details to a different paper.

We envision that, a followup specification will ensure that the system scheduler will work in freestanding implementations by sharing the implementation with the main scheduler, which is driven by the main thread.

## Making `system_context` implementation-defined and replaceable ## {#replaceable_system_context}
The system context aims to allow people to implement an application that is dependent only on parallel forward progress and to port it to a wide range of systems.
As long as an application does not rely on concurrency, and restricts itself to only the system context, we should be able to scale from single threaded systems to highly parallel systems.

In the extreme, this might mean porting to an embedded system with a very specific idea of an execution context.
Such a system might not have a multi-threading support at all, and thus the system context not only runs with single thread,
but actually runs on the system's only thread. We might build the context on top of a UI thread, or we might want to swap
out the system-provided implementation with one from a vendor (like Intel) with experience writing optimised threading
runtimes.

The latter is also important for the composability of the existing code with the `system_context`, i.e., if
Intel Threading building blocks (oneTBB) is used by somebody and they want to start using `system_context` as well, it's
likely that the users want to replace `system_context` implementation with oneTBB because in that case they would have
one thread pool and work scheduler underneath.

We should allow customisation of the system context to cover this full range of cases.
For a whole platform this is relatively simple.
We assume that everything is an implementation-defined type.
The `system_context` itself is a named type, but in practice is implementation-defined, in the same way that `std::vector` is implementation-defined at the platform level.

Other situations may offer a little less control.
If we wish Intel to be able to replace the system thread pool with TBB, or Adobe to customise the runtime that they use for all of Photoshop to adapt to their needs, we need  a different customisation mechanism.

To achieve this we see options:

1. Link-time replaceability. This could be achieved using weak symbols, or by choosing a runtime library to pull in using build options.
1. Run-time replaceability. This could be achieved by subclassing and requiring certain calls to be made early in the process.
1. Compile-time replaceability. This could be achieved by importing different headers, by macro definitions on the command line or various other mechanisms.

Link-time replaceability has the following characteristics:
* Pro: we have precedence in the standard: this is similar to replacing `operator new`.
* Pro: more predictable, in that it can be guaranteed to be application-global.
* Pro: some of the type erasure and indirection can be removed in practice with link-time optimisation.
* Con: it requires defining the ABI and thus, in some cases, would require some type erasure and some inefficiency.
* Con: harder to get it correctly with shared libraries (e.g., DLLs might have different replaced versions of the system scheduler).
* Con: the replacement might depend on the order of linking.

Run-time replaceability has the following characteristics:
* Pro: we have precedence in the standard: this is similar to `std::set_terminate()`.
* Pro: easier to achieve consistent behavior on applications with shared libraries (e.g., Windows has the same version of C++ standard library in DLL).
* Pro: a program can have multiple implementations of system scheduler.
* Con: race conditions between replacing the system scheduler and using it to spawn work.
* Con: implies going over an ABI, and cannot be optimized at link-time.
* Con: different implementation may allocate resources for the system scheduler at startup, and then, at the start of main, the implementation is replaced (this is mainly a QOI issue).
* Con: requires strict lifetime and ownership control to be safe, and for the user to do the right thing explicitly.

Compile-time replaceability has the following characteristics:
* Pro: users can do this with a type-def that can be used everywhere and switched.
* Con: potential problems with ODR violations.
* Con: doesn't support shareability across different binaries of the same process

The paper considers compile-time replaceability as not being a valid option because it easily breaks one of the fundamental
design principles of a `system_context`, i.e. having one, shared, application-wide execution context, which avoids
oversubscription.

Replaceability is also part of the [[P2900R7]] proposal for the contract-violation handler.
The paper proposes that whether the handler is replaceable to be implementation-defined.
If an implementation chooses to support replaceability, it shall be done similar to replacing the global `operator new` and `operator delete` (link-time replaceability).

The feedback we received from Microsoft, is that they are not interested in supporting replaceability on their platforms.
They would prefer that we offer implementations an option to not implement replaceabiilty.
Moreover, for systems for which replaceability is supported they would prefer to make the replaceabiilty mechanism to be implementation defined.

The authors disagree with the idea that replaceability is not needed for Windows platforms (or other platforms that provide an OS scheduler).
The OS sheduler is optimized for certain workloads, and it's not the best choice for all workloads.
This way not providing replaceability options have the following drawbacks:
* it limits the ability to hand-tune the performance of the application (when system scheduler is used);
* it limits the system_scheduler ability to be used in for CPU-intensive workloads;
* it limits the system_scheduler ability to be used for platforms with accelerators;
* it limits the composability of the system context with other parallel runtimes (while avoiding oversubscription).

For this reasons, the authors encourage all platforms to support replaceability of the system context.

However, in accordance with the feedback, the paper proposes the following:
* whether the system context is replaceable or not is implementation-defined.
* the replaceability mechanism (if the implementation decides to support it) is implementation-defined.
* if the implementation allows replaceability, we define an API for implementing custom system contexts.

## Extensibility ## {#extensibility}

The `std::execution` framework is expected to grow over time.
We expect to add time-based scheduling, async I/O, priority-based scheduling, and other for now unforeseen functionality.
The `system_context` framework needs to be designed in such a way that it allows for extensibility.

Whatever the replaceability mechanism is, we need to ensure that new features can be added to the system context in a backwards-compatible manner.

There are two levels in which we can extend the system context:
1. Add more types of schedulers, beside the system scheduler.
2. Add more features to the existing scheduler.

The first type of extensibility can easily be solved by adding new getters for the new types of schedulers.
Different types of schedulers should be able to be replaced separately; e.g., one should be able to replace the I/O scheduler without replacing the system scheduler.
The discussed replaceability mechanisms support this.

The second type of extensibility can also be easily achieved, but, at this point, it's beside of the scope of this paper.
Next section provides more details.

## API for implementing custom system contexts ## {#custom_system_contexts}

A proper implementation of the system scheduler that meets all the goals expressed in the paper needs to be divided into two parts: "host" and "backend".
The host part implements the API defined in this paper and calls the backend for the actual implementation.
The backend provides the actual implementation of the system context (e.g., use Grand Central Dispatch or Windows Thread Pool).

As we need to switch between different backend, we need a "stable" type-erased API between these two parts.

An example of such an API can be found in [stdexec](https://github.com/NVIDIA/stdexec) repository.

## Shareability ## {#shareability}

One of the motivations of this paper is to stop the proliferation of local thread pools, which can lead to CPU oversubscription.
If multiple binaries are used in the same process, we don't want each binary to have its own implementation of system context.
Instead, we would want to share the same underlying implementation.

The recommendation of this paper is to leave the details of shareability to be implementation-defined or unspecified.

## Performance ## {#performance}

To support shareability and replaceability, system context calls may need to go across binary boundaries, over the defined API.
A common approach for this is to have COM-like objects.
However, the problem with that approach is that it requires memory allocation, which might be a costly operation.
This becomes problematic if we aim to encourage programmers to use the system context for spawning work in a concurrent system.

While there are some costs associated with implementing all the goals stated here, we want the implementation of the system context to be as efficient as possible.
For example, a good implementation should avoid memory allocation for the common case in which the default implementation is utilized for a platform.

This paper cannot recommend the specific implementation techniques that should be used to maximize performance; these are considered Quality of Implementation (QOI) details.

In the API for implementing custom system contexts, we define a `storage` type that can be used for avoiding memory allocation on the backend side.
The frontend will create such an object and pass it as a parameter to the backend.
If the storage indicated by this parameter is large enough, the backend can store the operation state there.
Otherwise, the backend may need to allocate memory on the heap.

Choosing the size of this storage may affect performance in a significant way.
If the storage created by the frontend is too small, the backend may be forced to perform a heap allocation; in addition, the frontend storage probably remains unused.
On the other hand, if the frontend storage is too big, the extra space is wasted.
Thus, if the size of the storage doesn't match the backend's needs, we waste storage space from the frontend, and we possibly need a memory allocation.

Wasting storage space on the frontend side can be a performance problem, as it may invalidate CPU cache lines.

We received feedback that the proposed model is too flexible, and we may improve performance by adding extra constraints in the API.
One of the proposals was to have the size of the storage be known at compile time.
This would remove an integer parameter from the `schedule` and `bulk_schedule`, and an `if` statement in the body of these functions.
Compared to the costs of calling over a type-erased ABI (which may be known only at link time) and of spawning new work, these costs are insignificant.
Granting this to be a compile-time value would require recompilation of all the modules in the application each time there is a change in this parameter; this seems to constrain too much what the user can do.
There are many use cases in which compiling all the modules from scratch may not be possible.

We envision cases in which people would link the replaceable system-context implementation separately from the rest of the modules in the application.
We may also expect different modules to be compiled with different storage sizes in the frontend; some of the modules may be better tuned for performance, while others are built once and used in multiple places, and may not have such high-performance requirements.
Thus, having the size of the frontend storage passed to the backend as a runtime parameter seems to be the best choice.

There was another proposal to make the standard guarantee a minimum value for this storage.
Immediately, this generates a question for which we cannot find a good answer: what would be the right value to use?
Then, would we really want to put such a value into the standard?
But, even if we would put such a limit in the standard, a backend implementation that has a larger operation state may still need to check if there is enough storage to put the operation state in it.
For example, the reference implementation uses, on one platform, 72 bytes for a `schedule` operation and 152 bytes for a `bulk_schedule` operation.
These values would be too large for other system schedulers that rely on the operating system; we cannot put such large values to be the minimum.

Thus, this idea of requiring a minimum storage size, besides its technical challenges, would not have practical advantages.
The best path forward is to leave the storage size to be implementation-defined; each implementation can choose a value that better fits the context on the targeted platform(s).

To complete the discussions, we also envision a case in which the implementation may want to not allocate any memory on the frontend side.
This would make the overall operation state object smaller, thus, potentially faster.
On the backend side, the operation states need to be on the heap, but one might use an allocator that makes allocations really cheap.
For example, Intel Threading Building Blocks (oneTBB) has a fast allocator and it doesn't try to avoid heap allocations at all costs.

## Lifetime ## {#lifetime}

Underneath the system scheduler, there is a singleton of some sort.
We need to specify the lifetime of this object and everything that derives from it.

Revision R4 of the paper mandates that the lifetime of any `system_context` must be fully contained within the lifetime of `main()`.
The reasoning behind this is that ensuring proper construction and destruction order of static objects is typically difficult in practice.
This is especially challenging during the destruction of static objects; and, by symmetry, we also did not want to guarantee the lifetime of the system scheduler before `main()`.
We argued that if we took a stricter approach, we could always relax it later.

We received feedback that this was too strict.
First, there are many applications where the C++ part does not have a `main()` function.
Secondly, this can be considered a quality of implementation issue; implementations can always use a Phoenix singleton pattern to ensure that the underlying system context object remains alive for the duration of the entire program.

Version R5 of the paper relaxes the lifetime requirements of the system scheduler.
The system scheduler can now be used in any part of a C++ program.


## Need for the `system_context` class ## {#expose_system_context_name}
Our goal is to expose a global shared context to avoid oversubscription of threads in the system and to efficiently share a system thread pool.
Underneath the `system_context` there is a singleton of some sort, potentially owned by the OS.

The question is how we expose the singleton.
We have a few obvious options:

 - Explicit context objects, as we've described in R2, R3 and R4 of this paper, where a `system_context` is constructed as any other context might be, and refers to a singleton underneath.
 - A global `get_system_context()` function that obtains a `system_context` object, or a reference to one, representing the singleton explicitly.
 - A global `get_system_scheduler()` function that obtains a scheduler from some singleton system context, but does not explicitly expose the context.

In R4 and earlier revisions, we opted for an explicit context object.
The reasoning was that providing explicit contexts makes it easier to understand the lifetime of the schedulers.
However, adding this extra class does not affect how one would reason about the lifetime of the schedulers or the work scheduled on them.
Therefore, introducing an artificial scope object becomes an unnecessary burden.

There were also arguments made for adding `system_context` so that we can later add properties to it, that don't necessarily belong to `system_scheduler`.
However, if we would later find such properties, nothing prevents us to add `system_context` class later, and make `get_system_scheduler()` return `get_system_context().get_scheduler()`.

Thus, the paper simply proposes a `get_system_scheduler()` function that returns a the system scheduler.
The system context is implementation-defined and not exposed to the user.

## Priorities ## {#priorities}
It's broadly accepted that we need some form of priorities to tweak the behaviour of the system context.
This paper does not include priorities, though early drafts of R2 did.
We had different designs in flight for how to achieve priorities and decided they could be added later in either approach.

The first approach is to expand one or more of the APIs.
The obvious way to do this would be to add a priority-taking version of `system_context::get_scheduler()`:

```cpp
implementation-defined-system_scheduler get_scheduler();
implementation-defined-system_scheduler get_scheduler(priority_t priority);
```

This approach would offer priorities at scheduler granularity and apply to large sections of a program at once.

The other approach, which matches the receiver query approach taken elsewhere in [[P2300R9]] is to add a `get_priority()` query on the receiver, which, if available, passes a priority to the scheduler in the same way that we pass an `allocator` or a `stop_token`.
This would work at task granularity, for each `schedule()` call that we connect a receiver to we might pass a different priority.

In either case we can add the priority in a separate paper.
It is thus not urgent that we answer this question, but we include the discussion point to explain why they were removed from the paper.

## Reference implementation ## {#reference_implementation}

The authors prepared a reference implementation in [stdexec](https://github.com/NVIDIA/stdexec)

A few key points of the implementation:
* The implementation is divided into two parts: "host" and "backend". The host part implements the API defined in this paper and calls the backend for the actual implementation. The backend provides the actual implementation of the system context.
* Allows link-time replaceability for `system_scheduler`. Provides examples on doing this.
* Allows run-time replaceability for `system_scheduler`. Provides examples on doing this.
* Defines a replaceability API between the host and backend parts. This way, one can easily extend this interface when new features need to be added to `system_context`.
* Uses preallocated storage on the host side, so that the default implementation doesn't need to allocate memory on the heap when adding new work to `system_scheduler`.
* Guarantees a lifetime of at least the duration of `main()`.
* As the default implementation is created outside of the host part, it can be shared between multiple binaries in the same process.
* uses `libdispatch` on MacOS; uses a `static_thread_pool`-based implementation as a default on other platforms.

## Addressing received feedback ## {#addressing_feedback}

### Allow for system context to borrow threads ### {#borrow_threads}
Early feedback on the paper from Sean Parent suggested a need for the system context to support a configuration where it carries no threads of its own and takes over the main thread.
While in [[P2079R2]] we proposed `execute_chunk` and `execute_all`, these enforce a particular implementation on the underlying execution context.
Instead, we simplify the proposal by removing this functionality and assuming that it is implemented by link-time or run-time replacement of the context.
We assume that the underlying mechanism to drive the context, should one be necessary, is implementation-defined.
This allows for custom hooks into an OS thread pool, or a simple `drive()` method in main.

As we discussed previously, a separate paper is supposed to take care of the drive-ability aspect.

### Allow implementations to use Grand Central Dispatch and Windows Thread Pool ### {#wtp_and_gcd}

In the current form of the paper, we allow implementations to define the best choice for implementing the system context for a particular system.
This includes using Grand Central Dispatch on Apple platforms and Windows Thread Pool on Windows.

In addition, we propose implementations to allow the replaceability of the system context implementation.
This means that users should be allowed to write their own system context implementations that depend on OS facilities or
a necessity to use some vendor (like Intel) specific solutions for parallelism.

### Priorities and elastic pools ### {#priorities_and_elastic_pools}

Feedback from Sean Parent:
> There is so much in that proposal that is not specified. What requirements are placed on the system scheduler? Most system schedulers support priorities and are elastic (i.e., blocking in the system thread pool will spin up additional threads to some limit).

The lack of details in the specification is intentional, allowing implementers to make the best compromises for each platform.
As different platforms have different needs, constraints, and optimization goals, the authors believe that it is in the best interest of the users to leave some of these details as Quality of Implementation (QOI) details.

### Implementation-defined may make things less portable ### {#less_portability_with_implementation_defined}

Some feedback gathered during discussions on this paper suggested that having many aspects of the paper to be implementation-defined would reduce the portability of the system context.

While it is true that people that would want to replace the system scheduler will have a harder time doing so, this will not affect the users of the system scheduler.
They would still be able to the use system context and system scheduler without knowing the implementation details of those.

We have a precedence in the C++ standard for this approach with the global allocator.
